import { Relationship } from "./relationship";
import { Element } from "./element";
import { InteractionStyle } from "./interactionStyle";
import { Location } from "./location";
import { Person } from "./person";
import { SoftwareSystem } from "./softwareSystem";
import { Container } from "./container";
import { DeploymentNode } from "./deploymentNode";
import { ContainerInstance } from "./containerInstance";
import { Component } from "./component";
import { IImpliedRelationshipsStrategy } from "./impliedRelationshipsStrategy";
export declare class Model {
    relationships: Relationship[];
    private _idGenerator;
    people: Person[];
    softwareSystems: SoftwareSystem[];
    containerInstances: ContainerInstance[];
    deploymentNodes: DeploymentNode[];
    impliedRelationshipsStrategy: IImpliedRelationshipsStrategy;
    private _elementsById;
    toDto(): any;
    fromDto(dto: any): void;
    hydrate(): void;
    hasRelationshipTargeting(target: Element): boolean;
    containsElement(element: Element): boolean;
    addRelationship(source: Element, destination: Element, description: string, technology?: string, interactionStyle?: InteractionStyle, createImpliedRelationships?: boolean): Relationship | null;
    addPerson(name: string, description: string, location?: Location): Person | null;
    addSoftwareSystem(name: string, description: string, location?: Location): SoftwareSystem | null;
    addContainer(parent: SoftwareSystem, name: string, description: string, technology: string): Container | null;
    addComponent(parent: Container, name: string, description: string, type?: string, technology?: string): Component | null;
    addContainerInstance(deploymentNode: DeploymentNode, container: Container): ContainerInstance;
    addDeploymentNode(name: string, description: string, technology: string, parent?: DeploymentNode | null, environment?: string, instances?: number): DeploymentNode | null;
    getElement(id: string): Element;
    getRelationship(id: string): Relationship | undefined;
    private addRelationshipToInternalStructures;
    private addElementToInternalStructures;
    private hydrateRelationships;
    private hydrateDeploymentNode;
    private hydrateDeploymentNodeRelationships;
    private getPersonWithName;
    private getSoftwareSystemWithName;
}
